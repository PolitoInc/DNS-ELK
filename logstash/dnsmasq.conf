input {
    # Listen for logs from Filebeat on default port
    beats {
        port => 5044
    type => "logs"
    }
     file {
                 path => "/opt/logstash/dnsmasq.log"
                 type => "dnslogfile"
                 start_position => "beginning"
        }
}

filter {
    # These grok patterns will match on 3 types of the dnsmaq logs and use custom patterns
    grok {
        patterns_dir => ["./patterns"]
        match=> { "message" => ["^%{logdate:LOGDATE} dnsmasq\[[\d]+\]\: query\[[\w]+\] %{domain:DOMAIN} from %{clientip:CLIENTIP}"
        , "^%{logdate:LOGDATE} dnsmasq\[[\d]+\]\: reply %{domain:DOMAIN} is %{ip:IP}", "^%{logdate:LOGDATE} dnsmasq\[[\d]+\]\: %{blocklist:BLOCKLIST} %{domain:DOMAIN} is %{ip:IP}"]
        }
    }
    # Standardize the @timestamp so it matches LOGDATE
    date {
        match => [ "LOGDATE", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss", "ISO8601" ]
    }
    # Enrich logs with GeoIP geolocation data
    geoip {
        source => "IP"
    }
    
     if [type] == "dnslogfile" {
		
			grok{
				match => { "message" => "%{DATA}\]: %{WORD:dns_action_id}" }
			}
			
			if "_grokparsefailure" in [tags] { drop {} }
			
			if [dns_action_id] == "query" {
				grok{
						match => { "message" => "%{SYSLOGTIMESTAMP:start_time} %{WORD:app_name}\[%{NUMBER}\]: %{WORD:dns_action}\[%{WORD:dns_record}\] %{DATA:domain} %{WORD} %{IP:src_ip}" }
				}
			}
			
			if [dns_action_id] == "forwarded" {
				grok{
						match => { "message" => "%{SYSLOGTIMESTAMP:start_time} %{WORD:app_name}\[%{NUMBER}\]: %{WORD:dns_action} %{DATA:domain} %{WORD} %{IP:dns_server}" }
				}
			}
			
			if [dns_action_id] == "reply" or  [dns_action_id] == "cached"{ 
				grok{
						patterns_dir => ["/opt/logstash/patterns"]
						match => { "message" => "%{SYSLOGTIMESTAMP:start_time} %{WORD:app_name}\[%{NUMBER}\]: %{WORD:dns_action} %{HOSTNAME:domain} %{WORD} %{IPORCNAME:answer}" }
				}
			}
			
			if [dns_action_id] == "config" {
				grok{
						match => { "message" => "%{SYSLOGTIMESTAMP:start_time} %{WORD:app_name}\[%{NUMBER}\]: %{WORD:dns_action} %{HOSTNAME:domain} %{WORD} %{IPORHOST:answer}" }
				}
			}

			date {
					match => ["stat_time", "yyyy-MM-dd HH:mm:ss"]
					timezone => "Asia/Shanghai"
					target => "@timestamp"
			}

            if [src_ip] !~ "^127\.|^192\.168\.|^172\.1[6-9]\.|^172\.2[0-9]\.|^172\.3[01]\.|^10\." { 

		        geoip {
			         source => "src_ip"
			         target => "geoip"
			         database => "/opt/GeoLite2-City.mmdb"
		         }
	         }
        
	

	}
}

output {
    # Ship the logs to Elasticsearch and output to screen
    elasticsearch {
        # Specify your Elasticsearch IP
        hosts => ["localhost:9200"]
        index => "logstash-dnsmasq-%{+YYYY.MM.dd}"
    }
    stdout {
        codec => rubydebug
    }
    
      if [type] == "dnslogfile" {
                stdout{codec=>rubydebug}

                elasticsearch {
                        hosts => ["http://localhost:9200"]
                        index => "logstash-dns"
                }

        }
}
